#!/usr/bin/perl -w
use strict;

# make module lattice files

# lattice file for doing module-access analysis
#
# we do a product of N ref-level taint analysis:
#    $foo_otherAccess [level = ref, sign = neg]
#    $foo_alloc       [level = ref, sign = pos]
#    $foo_otherAccess < $foo_alloc

# lattice file for doing module-write analysis
#
# we do a product of N ref-level taint analysis:
#    $foo_otherWrite [level = ref, sign = neg]
#    $foo_alloc      [level = ref, sign = pos]
#    $foo_otherWrite < $foo_alloc

# lattice file for doing module-trust analysis
#
# we do a product of N hybrid value/ref-level taint analysis:
#    $foo_access       [level = ref,   sign = neg]
#    $foo_otherControl [level = value, sign = pos]
#    $foo_access < $foo_otherControl

# here is the standard taint analysis for reference:
#    $untainted [level = value, sign = neg]
#    $tainted   [level = value, sign = pos]
#    $untainted < $tainted

# globals
my $access;                     # do an access analysis?
my $write;                      # do a write analysis?
my $trust;                      # do a trust analysis?
my @modules;                    # list of modules

sub parse_command_line {
  while (@ARGV) {
    my $arg = shift @ARGV;
    if (0) {                    # orthogonality
    } elsif ($arg eq '--access') {
      ++$access;
    } elsif ($arg eq '--write') {
      ++$write;
    } elsif ($arg eq '--trust') {
      ++$trust;
    } elsif ($arg eq '--modules') {
      $arg = shift @ARGV;
      my @modules0 = split ' ', $arg;
      push @modules, @modules0;
    } else {
      die "illegal argument:$arg\n";
    }
  }
}

sub check_integrity {
  # access and write mutually exclude
  if ($access && $write) {
    die "Do not specify both --access and --write\n";
  }
}

sub be_verbose {
  if ($access) {
    warn "module_make_lattice generating lattice for Access analysis\n";
  }
  if ($write) {
    warn "module_make_lattice generating lattice for Write analysis\n";
  }
  if ($trust) {
    warn "module_make_lattice generating lattice for Trust analysis\n";
  }
  warn "module_make_lattice modules: " . join(', ', @modules) . "\n";
}

sub emit_lattice {
  for my $mod (@modules) {
    if ($access) {
      # module-access
      print "partial order [casts-preserve] {\n";
      # $untainted
      print "  \$${mod}_otherAccess [level = ref, sign = neg]\n";
      # $tainted
      print "  \$${mod}_alloc       [level = ref, sign = pos]\n";
      # $untainted < $tainted
      print "  \$${mod}_otherAccess < \$${mod}_alloc\n";
      print "}\n";
    } elsif ($write) {
      # module-write
      print "partial order [casts-preserve] {\n";
      # $untainted
      print "  \$${mod}_otherWrite [level = ref, sign = neg]\n";
      # $tainted
      print "  \$${mod}_alloc      [level = ref, sign = pos]\n";
      # $untainted < $tainted
      print "  \$${mod}_otherWrite < \$${mod}_alloc\n";
      print "}\n";
    } else {
      die "variable accessVsWrite was not set to a legal value\n";
    }

    if ($trust) {
      # module-trust
      print "partial order [casts-preserve] {\n";
      # $untainted
      print "  \$${mod}_access       [level = ref,   sign = neg]\n";
      # $tainted
      print "  \$${mod}_otherControl [level = value, sign = pos]\n";
      # $untainted < $tainted
      print "  \$${mod}_access < \$${mod}_otherControl\n";
      print "}\n";
    }
  }
}

# main
parse_command_line();
check_integrity();
be_verbose();
emit_lattice();
